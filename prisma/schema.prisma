generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String?   // Optional field for phone number
  address     String?   // Optional field for address
  lastLogin   DateTime? // Optional field for last login timestamp
  role        Role
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requestsCreated   Request[] @relation("CreatedRequests")
  requestsAssigned  Request[] @relation("AssignedRequests")
  requestsAssignedBy Request[] @relation("AssignedByRequests")
}

model Request {
  id                 String   @id @default(uuid())
  title              String
  requestIntro       String?
  requestOutro       String?
  requestOriginal    String?
  requestAIProcessed String?
  createdAt          DateTime @default(now())
  completedAt        DateTime?
  percentComplete    Float    @default(0)
  startedAt          DateTime?
  updatedAt          DateTime @updatedAt

  // Time fields with explicit relation names
  dueAfterTime       TimeFrame @relation("DueAfterTimeFrame", fields: [dueAfterTimeId], references: [id])
  turnaroundTime     TimeFrame @relation("TurnaroundTimeFrame", fields: [turnaroundTimeId], references: [id])

  dueAfterTimeId     String @unique
  turnaroundTimeId   String @unique

  // Relations
  tasks              Task[]
  completedTasks     String[] // Array of completed task IDs
  assigneeId         String?
  assignedById       String?
  createdById        String?

  assignee           User?    @relation("AssignedRequests", fields: [assigneeId], references: [id])
  assignedBy         User?    @relation("AssignedByRequests", fields: [assignedById], references: [id])
  createdBy          User?    @relation("CreatedRequests", fields: [createdById], references: [id])
  changeLog          Log[]

  productTags        ProductTag[]
  initiativesTags    InitiativeTag[]
}

model TimeFrame {
  id                 String   @id @default(uuid())
  timeUnit           TimeUnit
  timeNumber         Int

  // Back-references for relations with Request
  dueAfterRequest    Request? @relation("DueAfterTimeFrame")
  turnaroundRequest  Request? @relation("TurnaroundTimeFrame")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  taskText    String?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requestId   String?
  request     Request?  @relation(fields: [requestId], references: [id])
}

model Log {
  id         String   @id @default(uuid())
  action     String
  details    String?
  createdAt  DateTime @default(now())
  
  // Relations
  requestId  String
  request    Request  @relation(fields: [requestId], references: [id])
}

enum Role {
  ADMIN
  PM    // Project Manager
  PA    // Personal Assistant
  ASSIGNEE
}

enum TimeUnit {
  HOUR
  DAY
  WEEK
}

enum ProductTag {
  ONBOARDING
  ANALYST
  PIPELINE
  DOCS
  VAULT
  COMPLIANCE
  BACKOFFICE_SETTINGS
  BACKOFFICE
}

enum InitiativeTag {
  API
  CYBERSECURITY
  BACKOFFICE
  UI
  UX
  DOCUMENT_AUTOMATION
}
